ChatPlayer
==========

In this section we will create the ``ChatPlayer`` node, which will be another extension of
``ChatEntity``. This node will be attached to the player character and will allow it to interact
with the ChatAI nodes. It will be controlled by keyboard and UI input from the player. By the end
of this section, we should be able to see when the player gets close enough to "see" Gralk, when
they start and end conversations, and when they send and respond to messages. (Note: Since we don't
have the UI set up yet, all of this will be shown in the terminal for now and messages will need to
be hard-coded into our scripts. We'll create the UI in the next section.)

Part 1: Writing the ChatPlayer Script
-------------------------------------

* Create ``ChatPlayer.cs``.
* Make it a GlobalClass.

.. code-block:: csharp

    using Godot;

    [GlobalClass]
    public partial class ChatPlayer : ChatEntity
    {
        (...)
    }

Properties
^^^^^^^^^^

* The current control hint.

.. code-block:: csharp

    // Properties
    private string _controlHint;  // The current control hint

* Signals to connect to the UI.

.. code-block:: csharp

    // Signals for connecting to the UI
    [Signal]
    public delegate void ControlHintUpdatedEventHandler(string controlHint);
    [Signal]
    public delegate void ChatEntityAddedEventHandler(ChatEntity chatEntity);
    [Signal]
    public delegate void ChatEntityRemovedEventHandler(ChatEntity chatEntity);
    [Signal]
    public delegate void ConvoStartedEventHandler();
    [Signal]
    public delegate void ConvoEndedEventHandler();
    [Signal]
    public delegate void MsgAddedEventHandler(ChatEntity sender, string msg);

Control Hint Methods
^^^^^^^^^^^^^^^^^^^^

* ``_Process()`` method keeps constant watch on current circumstances and updates control hint
  accordingly.

.. code-block:: csharp

    public override void _Process(double delta)
    {
        string newControlHint = "Use the arrow keys to move";
        if (InConvo())
        {
            newControlHint = "Press ESC to end the conversation";
        }
        else
        {
            ChatEntity nearestChatEntity = NearestChatEntity();
            if (nearestChatEntity != null)
                newControlHint = "Press SHIFT to talk with " + nearestChatEntity.ChatName;
        }
        if (newControlHint != _controlHint)
        {
            _controlHint = newControlHint;
            GD.Print("Control Hint: " + _controlHint);
            EmitSignal("ControlHintUpdated", _controlHint);
        }
    }

Conversation Methods
^^^^^^^^^^^^^^^^^^^^

* ``_Input()`` method used to listen to player input SHIFT and ESC. Starts or ends a conversation
  accordingly.

.. code-block:: csharp

    public override void _Input(InputEvent @event)
    {
        if (InConvo())
        {
            if (@event.IsActionPressed("end_convo"))
                EndConvo(_inConvoWith);
        }
        else
        {
            if (@event.IsActionPressed("start_convo"))
            {
                ChatEntity nearestChatEntity = NearestChatEntity();
                if (nearestChatEntity != null)
                    StartConvo(nearestChatEntity);
            }
        }
    }

* ``StartConvo()`` and ``EndConvo()`` start and end conversations.

.. code-block:: csharp

    // Attempts to start a conversation with another ChatEntity.
    // Will fail and return false if otherChatEntity is already in a conversation.
    public override bool StartConvo(ChatEntity otherChatEntity)
    {
        // Do the basic stuff
        if (!base.StartConvo(otherChatEntity))
            return false;

        // If otherChatEntity is a ChatAI, notify it of the start of the conversation
        if (otherChatEntity is ChatAI otherChatAI)
            otherChatAI.Notify(ChatName + " has started a conversation with you.");

        // Indicate that a conversation was started
        GD.Print("Started a conversation with " + otherChatEntity.ChatName);
        EmitSignal(SignalName.ConvoStarted);

        // Return success
        return true;
    }

    // Attempts to end a conversation with another ChatEntity
    // Will fail and return false if otherChatEntity is not in a conversation with this ChatEntity
    public override bool EndConvo(ChatEntity otherChatEntity)
    {
        // Do the basic stuff
        if (!base.EndConvo(otherChatEntity))
            return false;

        // If otherChatEntity is a ChatAI, notify it of the end of the conversation
        if (otherChatEntity is ChatAI otherChatAI)
            otherChatAI.Notify(ChatName + " has ended their conversation with you.");

        // Indicate that a conversation was ended
        GD.Print("Ended a conversation with " + otherChatEntity.ChatName);
        EmitSignal(SignalName.ConvoEnded);

        // Return success
        return true;
    }

Nearby ChatEntity Methods
^^^^^^^^^^^^^^^^^^^^^^^^^

* ``OnChatEntityEntered()`` and ``OnChatEntityExited()`` track chat entities as they come into or
  move out of the player's vicinity.

.. code-block:: csharp

    protected override void OnChatEntityEntered(ChatEntity enteringChatEntity)
    {
        base.OnChatEntityEntered(enteringChatEntity);
        GD.Print(enteringChatEntity + " has entered your vicinity");
        EmitSignal("ChatEntityAdded", enteringChatEntity);
    }

    protected override void OnChatEntityExited(ChatEntity exitingChatEntity)
    {
        base.OnChatEntityExited(exitingChatEntity);
        GD.Print(exitingChatEntity + " has exited your vicinity");
        EmitSignal("ChatEntityRemoved", exitingChatEntity);
    }

Messaging Methods
^^^^^^^^^^^^^^^^^

* Override ``SendMsg()`` and ``ReceiveMsg()`` so that they also emit signals to be picked up by the
  UI.

.. code-block:: csharp

    // A useful shorthand for sending a message
    // Called when the MsgSent signal is emitted by UI
    public override void SendMsg(string msg)
    {
        // Send the message to ChatEntity _inConvoWith
        base.SendMsg(msg);

        // Emit a signal that there is a new message (for UI)
        EmitSignal(SignalName.MsgAdded, this, msg);
    }

    // Called when ChatEntity _inConvoWith emits a MsgSent signal
    public override void ReceiveMsg(string msg)
    {
        // Emit a signal that there is a new message (for UI)
        EmitSignal(SignalName.MsgAdded, _inConvoWith, msg);
    }

Part 2: Using the ChatPlayer Node
---------------------------------

TODO

Attaching to Seraphis
^^^^^^^^^^^^^^^^^^^^^

* Add ``ChatPlayer`` to the Seraphis scene (should be in "Create New Node" dialogue; rebuild if not).
* Set ``ChatName`` and (optionally) ``ChatDescr`` properties.
* Add a ``CollisionShape2D`` as a child of the ``ChatAI`` node. Give the ``CollisionShape2D`` a suitable shape (such as a circle with a radius of 75 px).
* Also edit the *Seraphis.cs* script so that the player cannot move while in a conversation.

Try It Out
^^^^^^^^^^

* Will need to hardcode some messages into the script, perhaps when a conversation is started.
* Can see stuff happening in the terminal ("Output" on Godot).
