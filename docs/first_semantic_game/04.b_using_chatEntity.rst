Using ChatEntity
================

In this section we will create the ``ChatPlayer`` node. By the end of this
section, we should be able to see when two characters get close enough to see each other, when they
start and end conversations, and when they send and respond to messages. (Note: Since we don't have
the UI set up yet, all of this will be shown in the terminal for now and messages will need to be
hard-coded into our scripts.)

Adding to Gralk Scene
^^^^^^^^^^^^^^^^^^^^^

Open the Gralk scence. 

* Add a ``ChatAI`` node to the Gralk scene.
* Set ``ChatName`` and ``ChatDescr`` properties. 

TODO (Need some explanation for the format of the ``ChatDescr`` property.)

Part 2: ChatPlayer
------------------

Finally, we can also extend ``ChatEntity`` to create the ``ChatPlayer`` node. This node will be
attached to the player character and will allow it to interact with the ChatAI nodes. It will be
controlled by keyboard and UI input from the player.

Writing the Script
^^^^^^^^^^^^^^^^^^

* Need to create a new script that defines a ``[GlobalClass]`` node that inherits from ``ChatEntity``.
* The ``_Input()`` method is called whenever there is input. It only does something if that input is to start or end a conversation, in which case it calls ``StartConvo()`` and ``EndConvo()``, respectively. Also prints notifications out to the console.
* The methods ``StartConvo()`` and ``EndConvo()`` are overridden. Besides calling the base methods from ``ChatEntity``, they also notify the other entity that a conversation has started (assuming the other entity is a ``ChatAI``).
* The methods ``OnChatEntityEntered()`` and ``OnChatEntityExited()`` are overridden so that they also print out when an entity enters or leaves.
* The methods ``SendMsg()`` and ``ReceiveMsg()`` are overridden so that any incoming or outgoing messages are printed to the console with the name of the entity that sent them.

**Note:** The following will be added later when creating the UI:

* ``_controlHint`` property and ``_Process()`` method used to keep it updated
* The signals used to notify the UI of updates/changes
* Emitting these signals from the various methods (instead of printing to the console)

Adding to Seraphis Scene
^^^^^^^^^^^^^^^^^^^^^^^^

* Add ``ChatAI`` to the Gralk scene.
* Set ``ChatName`` and (optionally) ``ChatDescr`` properties.
* Add a ``CollisionShape2D`` as a child of the ``ChatAI`` node. Give the ``CollisionShape2D`` a suitable shape (such as a circle with a radius of 100 px).

Part 3: Try it Out
------------------

...
