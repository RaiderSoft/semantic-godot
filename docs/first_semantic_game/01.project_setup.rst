Setting up the Semantic Godot Project
=====================================

Creating a New Godot Project
----------------------------

1. Launch Godot
2. Navigate to "New Project" in the Project Manager.
3. Define a project name and designate a location on the system for project files. Create a dedicated folder for this purpose.
   The compatibility renderer works fine for our purposes.

For more information on using C# with Godot see https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_basics.html

Hello World Script
------------------

First, let's create a simple C# script which will trigger Godot to initialize
a dotnet project.

1. **Create a Node and Attach the Script**:
    - Create a new 2D scence with a Node2D root.
    - Right click the node and rename it to `MainGame`
    - Right click the node and click `Attach Script`
        - Choose C# as the language
        - This will create `MainGame.cs`
    - Save the scene

2.
    Open a terminal, navigate to the project directory, and run the following
    commands to install dependencies:

.. code-block:: shell

    dotnet add package Microsoft.Extensions.Configuration
    dotnet add package Microsoft.Extensions.Configuration.UserSecrets
    dotnet add package Microsoft.SemanticKernel --prerelease


3. **Create a Main Script**: 

    .. code-block:: csharp

        using Godot;
        using Microsoft.SemanticKernel;

        public partial class MainGame : Node
        {
            public override void _Ready()
            {
                GD.Print("Semantic Kernel is ready!");
                // You can add additional code to interact with Semantic Kernel here.
            }
        }



4. **Build the Project**: Press ``F6`` or select ``Project > Build`` from the menu to build the project.

5. **Verify the Output**: Look for the message "Semantic Kernel is ready!" in the output console. 

Configuring the OpenAI API Key
------------------------------

To enable interaction with the OpenAI models through the Semantic Kernel, you
need to obtain and configure the OpenAI API key. 

1. **Obtain OpenAI API Key**:
    - If you don't already have an OpenAI API key, visit the `OpenAI Platform <https://platform.openai.com/signup>`_ and create an account or sign in.
    - Navigate to the API keys section and generate or copy your API key.

2. **Configure API Key in .NET**:
    - Open a terminal and navigate to your Godot project directory.
    - Run the following command to initialize user-secrets for your project:

    .. code-block:: shell

        dotnet user-secrets init

    - Run the following command, replacing `YOUR_API_KEY` with your actual OpenAI API key:

    .. code-block:: shell

        dotnet user-secrets set "OPENAI_API_KEY" "YOUR_API_KEY"

3. **Verify the Secret Configuration**: To make sure that the API key is properly stored, run:

    .. code-block:: shell

        dotnet user-secrets list

    You should see the output similar to:

    .. code-block:: shell

        OPENAI_API_KEY = ...

