The Limerick Game
=================

Initialization and Setup
------------------------

Instructions for creating the TrollAI class:
Start by creating a new C# script called `TrollAI.cs` and add the following code:


Start by creating a new C# script called `TrollAI.cs` in your Godot project.
Once you've done that, open the script and add the following namespaces at the top:

.. code-block:: csharp

    using Godot;
    using Microsoft.SemanticKernel.AI.ChatCompletion;
    using Microsoft.SemanticKernel.Connectors.AI.OpenAI.ChatCompletion;
    using System;
    using System.Threading.Tasks;
    using System.IO;

Now, proceed by defining the `TrollAI` class as a partial class inheriting from `ChatAI`, and also specify it as a GlobalClass.

.. code-block:: csharp

    [GlobalClass]
    public partial class TrollAI : ChatAI
    {
        // Your code will go here
    }

These namespaces and class definitions set the stage for the troll AI's behavior.

TODO: limerick game before evaluation and moving out of the way.

In your `TrollAI` class, we initialize the `_eval_limerick_chat` variable to manage a chat session
for evaluating limericks.

.. code-block:: csharp

    public override void _Ready()
    {
        _eval_limerick_chat = (OpenAIChatHistory)_chatGPT.CreateNewChat();
        var eval_template = File.ReadAllText("personalities/Evaluator.txt");
        var eval_context = _kernel.CreateNewContext();
        string eval_prompt = _promptRenderer.RenderAsync(eval_template, eval_context).GetAwaiter().GetResult();
        _eval_limerick_chat.AddSystemMessage(eval_prompt);
        base._Ready();
    }

1. `_eval_limerick_chat` initializes a new chat session for limerick evaluation.
2. The evaluator personality is read from a text file `Evaluator.txt`.
3. A new evaluation context is created.
4. Asynchronously, the `eval_prompt` is initialized using the template and context.
5. `eval_prompt` is then added as a system message to `_eval_limerick_chat`.

Message Receiving Logic
-----------------------

When a message is received, the `ReceiveMsg` method is called which, in turn, calls the asynchronous `ReceiveMsgAsync` method.

.. code-block:: csharp

    public async Task ReceiveMsgAsync(string msg)
    {
        // Code for receiving messages and logic...
    }

This handles message input and updates the chat history. It also generates a new riddle based on the received message.

The Evaluation Mechanism
-------------------------

The evaluation happens in `ReceiveMsgAsync` method. Here, we add the full reply from the assistant to `_eval_limerick_chat`.

.. code-block:: csharp

    _eval_limerick_chat.AddUserMessage(full_reply);
    var eval_limerick_reply = await _chatGPT.GenerateMessageAsync(_eval_limerick_chat, new ChatRequestSettings());

    if (eval_limerick_reply == "True")
    {
        GD.Print("TROLL IS HAPPY");
        CallDeferred("emit_signal", SignalName.RiddleAnswered);
    }

Here, if `eval_limerick_reply` returns "True", it indicates that the limerick was correctly formulated, and the Troll is happy. An event is emitted to signal this.


