ChatEntity Conversations
========================

TODO

Part 1: Updating ChatEntity
---------------------------

TODO

* Change to inherit from Area2D
* Will break ArguingTrolls Scene
* Allows us to sense nearby entities

Enhancing Messaging
^^^^^^^^^^^^^^^^^^^

First, we'll add a few methods to enhance the messaging behavior of an entity. Previously, we just
had two trolls that were automatically put in conversation with each other at the start of the
game. Now, we need to develop a way for entities to start and end conversations with each other.

Let's write two methods for this purpose: one to start a conversation and one to end it. These
methods will first do some basic checks to make sure the desired operation is valid. Then they will
set the ``_inConvoWith`` property according to the desired operation. Last, they will connect or
disconnect the ``MsgSent`` signals of each entity with the ``ReceiveMsg()`` method of the other
entity.

.. code-block:: csharp

    // Attempts to start a conversation with another ChatEntity.
    // Will fail and return false if either ChatEntity is already in a conversation.
    public virtual bool StartConvo(ChatEntity otherChatEntity)
    {
        // Check to make sure neither ChatEntity is already in a conversation
        if (_inConvoWith != null || otherChatEntity._inConvoWith != null)
            return false;

        // Put both ChatEntities in conversation mode
        _inConvoWith = otherChatEntity;
        otherChatEntity._inConvoWith = this;

        // Connect up the MsgSent signals
        MsgSent += otherChatEntity.ReceiveMsg;
        otherChatEntity.MsgSent += ReceiveMsg;

        // Return success
        return true;
    }

    // Attempts to end a conversation with another ChatEntity
    // Will fail and return false if otherChatEntity is not in a conversation with this ChatEntity
    public virtual bool EndConvo(ChatEntity otherChatEntity)
    {
        // Check to make sure both ChatEntities are in conversation with each other
        if (_inConvoWith != otherChatEntity || otherChatEntity._inConvoWith != this)
            return false;

        // Take both ChatEntities out of conversation mode
        _inConvoWith = null;
        otherChatEntity._inConvoWith = null;

        // Disconnect the MsgSent signals
        MsgSent -= otherChatEntity.ReceiveMsg;
        otherChatEntity.MsgSent -= ReceiveMsg;

        // Return success
        return true;
    }

Let's also write a simple method that checks whether the ``_inConvoWith`` property is null. This
will provide a simple (and public) way to check whether the entity is in a conversation at any
given moment. (We'll use this later to keep the player from moving while in a conversation.)

.. code-block:: csharp

    // Returns true if currently in a conversation, false otherwise
    public virtual bool InConvo()
    {
        return _inConvoWith != null;
    }

Nearby ChatEntities
^^^^^^^^^^^^^^^^^^^

Next, we will write some properties and methods to keep track of other nearby entities. This will
be used to display a list of entities to the player and will allow them to start a conversation
with the nearest entity. (Note: We won't set up the NPCs to use this feature in *this* project, but
it could be useful if you want GPT-4 powered NPCs to be able to see and keep track of objects in
the world around them.)

**List of Nearby Entities**

Let's first set up the list that will hold all of the nearby entities. We'll use a C# list for
this, so be sure to add the appropriate ``using`` statement.

.. code-block:: csharp

    using Godot;
    using System.Collections.Generic;  // allows us to use the List class

    [GlobalClass]
    public partial class ChatEntity : Area2D
    {
        (...)

        // List of ChatEntities currently in range
        protected List<ChatEntity> _nearbyChatEntities = new List<ChatEntity>();

        (...)
    }

**The Area2D Signals**

Now, we want to write a few methods to define what should happen when another entity enters the
vicinity of this entity. Since ``ChatEntity`` extends Godot's built-in ``Area2D`` node, we can
build this behavior off of its
`signals <https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_signals.html>`_
``AreaEntered`` and ``AreaExited``. These signals are emitted whenever another ``Area2D`` node
enters/exits the collision shape of the first ``Area2D``. Let's first just hook these signals up to
methods ``OnAreaEntered()`` and ``OnAreaExited()``, which we will declare later.

.. code-block:: csharp

    // Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        // Connect the signals for when another ChatEntity enters or exits the area
        AreaEntered += OnAreaEntered;
        AreaExited += OnAreaExited;
    }

These signals will be emitted whenever *any* other ``Area2D`` node enters/exits the area of this
entity. Since we only want to respond if the other node is also a ``ChatEntity``, let's have our
``OnAreaEntered()`` and ``OnAreaExited()`` check the type of the exiting/entering node and call
additional methods ``OnChatEntityEntered()`` and ``OnChatEntityExited()`` if the node is a
``ChatEntity``.

.. code-block:: csharp

    // Called when another Area2D enters the collision area of this ChatEntity
    private void OnAreaEntered(Area2D enteringArea2D)
    {
        if (enteringArea2D is ChatEntity enteringChatEntity)
            OnChatEntityEntered(enteringChatEntity);
    }

    // Called when another Area2D exits the collision area of this ChatEntity
    private void OnAreaExited(Area2D exitingArea2D)
    {
        if (exitingArea2D is ChatEntity exitingChatEntity)
            OnChatEntityExited(exitingChatEntity);
    }

**Other Methods**

Now we can write the ``OnChatEntityEntered()`` and ``OnChatEntityExited()`` methods. For right now
these methods will simply add/remove entities from the ``_nearbyChatEntities`` list. However, we
might want to expand upon them in the ``ChatAI`` or ``ChatPlayer`` scripts, so we'll make them
``virtual`` here.

.. code-block:: csharp

    // Called when another ChatEntity enters the collision area of this ChatEntity
    protected virtual void OnChatEntityEntered(ChatEntity enteringChatEntity)
    {
        _nearbyChatEntities.Add(enteringChatEntity);
    }

    // Called when another ChatEntity enters the collision area of this ChatEntity
    protected virtual void OnChatEntityExited(ChatEntity exitingChatEntity)
    {
        _nearbyChatEntities.Remove(exitingChatEntity);
    }

Finally, it would be convenient to be able to quickly find out which of the nearby entities is
"physically" the closest. To achieve this, we'll write a method that searches through all of the
entities in the ``_nearbyChatEntities`` list and returns the one whose ``GlobalPosition`` property
is closest to this entity.

.. code-block:: csharp

    // Returns the nearest ChatEntity in _nearbyChatEntities
    public ChatEntity NearestChatEntity()
    {
        // No nearby entities, return null
        if (_nearbyChatEntities.Count == 0)
        {
            return null;
        }
        // Otherwise, search through and find the nearest ChatEntity
        else
        {
            ChatEntity nearestChatEntity = _nearbyChatEntities[0];

            foreach (ChatEntity currentChatEntity in _nearbyChatEntities)
            {
                float nearestDistance = GlobalPosition.DistanceTo(nearestChatEntity.GlobalPosition);
                float currentDistance = GlobalPosition.DistanceTo(currentChatEntity.GlobalPosition);

                if (currentDistance < nearestDistance)
                    nearestChatEntity = currentChatEntity;
            }

            return nearestChatEntity;
        }
    }

Part 2: Updating ChatAI
-----------------------

TODO

Updating the Script
^^^^^^^^^^^^^^^^^^^

TODO

Attaching to Gralk
^^^^^^^^^^^^^^^^^^

TODO